# Generated by Django 3.2.19 on 2023-07-12 15:44

from django.db import migrations
from django.db.models import Q

from apps.projects.helpers import get_all_comments_project


def query_insights(apps, project) -> dict[str, int]:
    Module = apps.get_model("a4modules", "Module")
    Comment = apps.get_model("a4comments", "Comment")
    Answer = apps.get_model("a4polls", "Answer")
    Poll = apps.get_model("a4polls", "Poll")
    Vote = apps.get_model("a4polls", "Vote")
    Rating = apps.get_model("a4ratings", "Rating")
    Proposal = apps.get_model("a4_candy_budgeting", "Proposal")
    Idea = apps.get_model("a4_candy_ideas", "Idea")
    Like = apps.get_model("a4_candy_interactive_events", "Like")
    LiveQuestion = apps.get_model("a4_candy_interactive_events", "LiveQuestion")
    MapIdea = apps.get_model("a4_candy_mapideas", "MapIdea")
    Topic = apps.get_model("a4_candy_topicprio", "Topic")

    modules = Module.objects.filter(project=project)
    active_blueprints = set(modules.values_list("blueprint_type", flat=True))

    enable_ideas = active_blueprints.intersection({"BS", "IC"})
    enable_map_ideas = active_blueprints.intersection({"MBS", "MIC", "PB"})
    enable_proposals = "PB" in active_blueprints
    enable_polls = "PO" in active_blueprints
    enable_interactive_event = "IE" in active_blueprints
    enable_topic = "TP" in active_blueprints

    ideas = Idea.objects.filter(module__in=modules)
    map_ideas = MapIdea.objects.filter(module__in=modules)

    # comments = get_all_comments_project(project=project)
    comments = Comment.objects.filter(
        Q(project=project) | Q(parent_comment__project=project)
    )
    proposals = Proposal.objects.filter(module__in=modules)
    polls = Poll.objects.filter(module__in=modules)
    votes = Vote.objects.filter(choice__question__poll__in=polls)
    answers = Answer.objects.filter(question__poll__in=polls)
    live_questions = LiveQuestion.objects.filter(module__in=modules)
    likes = Like.objects.filter(livequestion__in=live_questions)
    topics = Topic.objects.filter(module__in=modules)

    values = [Rating.POSITIVE, Rating.NEGATIVE]
    ratings_ideas = Rating.objects.filter(idea__in=ideas, value__in=values)
    ratings_map_ideas = Rating.objects.filter(mapidea__in=map_ideas, value__in=values)
    ratings_comments = Rating.objects.filter(comment__in=comments, value__in=values)
    ratings_topics = Rating.objects.filter(topic__in=topics, value__in=values)

    count_comments = comments.count()
    count_ratings = ratings_comments.count()
    count_ideas = 0
    count_poll_answers = 0
    count_event_questions = 0

    creator_objects = [
        comments,
        ratings_comments,
    ]

    if enable_ideas:
        creator_objects.extend([ideas, ratings_ideas])
        count_ideas += ideas.count()
        count_ratings += ratings_ideas.count()

    if enable_map_ideas:
        creator_objects.extend([map_ideas, ratings_map_ideas])
        count_ideas += map_ideas.count()
        count_ratings += ratings_map_ideas.count()

    if enable_polls:
        creator_objects.extend([votes, answers])
        count_poll_answers += votes.count() + answers.count()

    if enable_interactive_event:
        count_event_questions += live_questions.count()
        count_ratings += likes.count()

    if enable_topic:
        creator_objects.append(topics)
        count_ratings += ratings_topics.count()

    if enable_proposals:
        creator_objects.append(proposals)
        count_ideas += proposals.count()

    creators_ids = set()
    for x in creator_objects:
        creators_ids.update(set(x.values_list("creator", flat=True)))

    count_creators = len(creators_ids)

    counts = {
        "active participants": count_creators,
        "comments": count_comments,
        "ratings": count_ratings,
    }

    if enable_ideas or enable_map_ideas or enable_proposals:
        counts["written ideas"] = count_ideas

    if enable_polls or enable_interactive_event:
        counts["poll answers"] = count_poll_answers

    if enable_interactive_event:
        counts["interactive event questions"] = count_event_questions

    return counts


def initialize_insights_table(apps, schema_editor):
    Project = apps.get_model("a4projects", "Project")
    Insight = apps.get_model("dev", "Insight")

    for project in Project.objects.all():
        counts = query_insights(apps=apps, project=project)
        insight = Insight(
            project=project,
            active_participants=counts["active_participants"],
            comments=counts["comments"],
            ratings=counts["ratings"],
            written_ideas=counts["written_ideas"],
            poll_answers=counts["poll_answers"],
            interactive_events=counts["interactive_events"],
        )
        insight.save()


class Migration(migrations.Migration):
    dependencies = [
        ("dev", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(code=initialize_insights_table),
    ]
