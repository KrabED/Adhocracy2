# Generated by Django 2.2.22 on 2021-05-14 15:16

import json
from copy import deepcopy
from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations
from importlib import import_module
from uuid import uuid4
from wagtail.core.blocks import StreamValue


def copy_page_data_to_content_streamfield(apps, schema_editor):
    """With the given page, copy the page data to the content stream_data"""
    # if the model no longer exists, return directly
    try:
        HomePage = import_module('apps.cms.pages').models.HomePage
        SimplePage = import_module('apps.cms.pages').models.SimplePage
    except:
        return
    for page in HomePage.objects.all():
        page_data = json.loads(page.to_json())
        import pdb; pdb.set_trace()
        page_data = json.loads(page.to_json())
        de_content_data = page_data_to_content_streamfield_data(page_data)
        if de_content_data != page.body_streamfield_de.stream_data:
            page.body_streamfield_de.stream_data = de_content_data
            page.save()
        en_content_data = page_data_to_content_streamfield_data(page_data)
        if en_content_data != page.body_streamfield_en.stream_data:
            page.body_streamfield_en.stream_data = en_content_data
            page.save()
        # for revision in page.revisions.all():
        #     revision_data = json.loads(revision.content_json)
        #     content_data = home_page_data_to_content_streamfield_data(revision_data)
        #     if content_data != revision_data.get('content'):
        #         # StreamField data is stored in revision.content_json in a string field
        #         revision_data['content'] = json.dumps(content_data)
        #         revision.content_json = json.dumps(
        #             revision_data, cls=DjangoJSONEncoder)
        #         revision.save()


def prevent_reverse_migration(apps, schema_editor):
    raise NotImplementedError(
        "This migration cannot be reversed without"
        + " inordinate expenditure of time. You can"
        + " `--fake` it if you know what you're doing,"
        + " and are a migration ninja."
    )


class Migration(migrations.Migration):

    dependencies = [
        ('a4_candy_cms_pages', '0010_add_new_blocks'),
    ]

    operations = [
        migrations.RunPython(
            copy_page_data_to_content_streamfield,
            prevent_reverse_migration,
        )
    ]


def page_data_to_content_streamfield_data(page_data):
    """With the given page field data, build and return content stream_data:
    * Copy existing page data into new stream_data.
    * Handle either the main page data or any revision data.
    * page_data is unchanged! (treated as immutable).
    """
    content_data = [
        {'type': 'col_background_cta_block', 'value': ...},
    ]
    return content_data

# from the pdb above
# (Pdb)     page.body_streamfield_de.stream_data
# [{'type': 'col_list_image_cta_block', 'value': {'columns_count': '2', 'columns': [{'image': 1, 'body': '', 'link': '', 'link_text': ''}, {'image': None, 'body': '<p>this is image cta with image as first block and text as second one!</p>', 'link': '', 'link_text': ''}]}, 'id': '7c1ab4c2-3be7-4ba3-8fbd-29aa6d0451c1'}, {'type': 'col_list_image_cta_block', 'value': {'columns_count': '2', 'columns': [{'image': None, 'body': '<p>This is image cta with text column left and image col right</p>', 'link': '', 'link_text': ''}, {'image': 1, 'body': '', 'link': '', 'link_text': ''}]}, 'id': 'c3ebc6ae-788f-4cf4-8b9f-8ec7284911e3'}, {'type': 'col_list_image_cta_block', 'value': {'columns_count': '1', 'columns': [{'image': 1, 'body': '<p>col image thing with one col with text and image</p>', 'link': '', 'link_text': ''}]}, 'id': '4710be6d-91c4-4c4d-b1e8-f1f49524c845'}, {'type': 'col_list_image_cta_block', 'value': {'columns_count': '2', 'columns': [{'image': 1, 'body': '<p>col image thing only two chosen, only one added</p>', 'link': '', 'link_text': ''}]}, 'id': 'df8c6d19-e7e2-438b-8d4b-df154130287d'}]
